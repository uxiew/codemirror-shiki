const e="Fortran (Fixed Form)",n=["f","F","f77","F77","for","FOR"],r={"source.fortran.fixed - ( string | comment )":{patterns:[{include:"#line-header"},{include:"#line-end-comment"}]}},o="fortran-fixed-form",t=[{include:"#comments"},{include:"#line-header"},{include:"source.fortran.free"}],a={comments:{patterns:[{begin:"^[cC\\*]",end:"\\n",name:"comment.line.fortran"},{begin:"^ *!",end:"\\n",name:"comment.line.fortran"}]},"line-end-comment":{begin:"(?<=^.{72})(?!\\n)",end:"(?=\\n)",name:"comment.line-end.fortran"},"line-header":{captures:{1:{name:"constant.numeric.fortran"},2:{name:"keyword.line-continuation-operator.fortran"},3:{name:"source.fortran.free"},4:{name:"invalid.error.fortran"}},match:"^(?!\\s*[!#])(?:([ \\d]{5} )|( {5}.)|(\\t)|(.{1,5}))"}},i="source.fortran.fixed",c={displayName:e,fileTypes:n,injections:r,name:o,patterns:t,repository:a,scopeName:i};export{c as default,e as displayName,n as fileTypes,r as injections,o as name,t as patterns,a as repository,i as scopeName};
